[MASTER]

# C extensions which may be loaded (and run arbitrary code!)
extension-pkg-whitelist=numpy, scipy, scipy.linalg
unsafe-load-any-extension=no

# Files or directories (names, not paths) to blacklist (names, regexes):
ignore=CVS
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint.
jobs=1

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Pickle collected data for later comparisons.
persistent=yes

# Specify a configuration file.
#rcfile=

# Show correction hint.
suggestion-mode=yes


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Disable messages/reports/categories/checkers, "all" to disable everything.
disable=apply-builtin,
        backtick,
        bad-inline-option,
        bad-python3-import,
        basestring-builtin,
        buffer-builtin,
        cmp-builtin, cmp-method,
        coerce-builtin, coerce-method,
        delslice-method,
        deprecated-itertools-function,
        deprecated-pragma,
        deprecated-str-translate-call,
        deprecated-string-function,
        deprecated-types-field,
        dict-items-not-iterating,
        dict-iter-method,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        dict-view-method,
        div-method,
        eq-without-hash,
        exception-message-attribute,
        execfile-builtin,
        file-builtin,
        file-ignored,
        filter-builtin-not-iterating,
        getslice-method,
        hex-method,
        idiv-method,
        import-star-module-level,
        indexing-exception,
        input-builtin,
        intern-builtin,
        invalid-str-codec,
        locally-disabled,
        locally-enabled,
        long-builtin,
        long-suffix,
        map-builtin-not-iterating,
        metaclass-assignment,
        next-method-called,
        next-method-defined,
        no-absolute-import,
        non-ascii-bytes-literal,
        nonzero-method,
        oct-method,
        old-division,
        old-ne-operator,
        old-octal-literal,
        old-raise-syntax,
        parameter-unpacking,
        print-statement,
        raising-string,
        range-builtin-not-iterating,
        raw-checker-failed,
        raw_input-builtin,
        rdiv-method,
        reduce-builtin,
        reload-builtin,
        round-builtin,
        setslice-method,
        standarderror-builtin,
        suppressed-message,
        sys-max-int,
        unichr-builtin,
        unicode-builtin,
        unpacking-in-except,
        useless-suppression,
        using-cmp-argument,
        xrange-builtin,
        zip-builtin-not-iterating,
        # I disagree with the required indentation style:
        bad-continuation,
        # temporary deactivation:
        missing-docstring,
        # classes are not just for methods:
        too-few-public-methods,
        # the pylint typechecker doesn't work very well:
        no-member, not-callable


# Enable messages/reports/categories/checkers
enable=c-extension-no-member


[REPORTS]

# Calculate score, up to 10.
score=yes
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Format string for displayed messages.
msg-template = {path}:{line}: [{symbol} {obj}] {msg}

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=colorized

# Tells whether to display a full report or only the messages
reports=no


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5

# Fully qualified path of divergent functions.
never-returning-functions=optparse.Values, sys.exit


[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging


[BASIC]

# Naming style matching correct argument names
argument-naming-style=snake_case
#argument-rgx=

# Naming style matching correct attribute names
attr-naming-style=snake_case
#attr-rgx=

# Bad variable names which should always be refused, separated by a comma
bad-names=foo, bar, baz

# Naming style matching correct class attribute names
class-attribute-naming-style=any
#class-attribute-rgx=

# Naming style matching correct class names
class-naming-style=PascalCase
#class-rgx=

# Naming style matching correct constant names
const-naming-style=UPPER_CASE
#const-rgx=

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1

# Naming style matching correct function names
function-naming-style=snake_case
#function-rgx=

# Good variable names which should always be accepted, separated by a comma
good-names=i, j, k, n, _,
           ex,  # for except: clauses
           T,  # for type parameters
           ax,  # for matplotlib axis
           lo, hi,  # for bounds
           x, xs, y, ys,  # for coordinates

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# Naming style matching correct inline iteration names
inlinevar-naming-style=any
#inlinevar-rgx=

# Naming style matching correct method names
method-naming-style=snake_case
#method-rgx=

# Naming style matching correct module names
module-naming-style=snake_case
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty, attr.ib

# Naming style matching correct variable names
variable-naming-style=snake_case
#variable-rgx=


[SPELLING]

max-spelling-suggestions=4

# Available dictionaries: none. Requires python-enchant package.
spelling-dict=

spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=
spelling-store-unknown-words=no  # update the private dict with unknown words?


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME, XXX, TODO


[VARIABLES]

additional-builtins=

allow-global-unused-variables=yes

# Callbacks have more liberal rules on arguments.
callbacks=cb_, _cb

# Dummy variables are not used.
# Include describe_ and it_ for pytest-describe test cases.
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_|^describe_|^it_

# Dummy arguments
ignored-argument-names=_.*

# Tells whether we should check for unused import in __init__ files.
init-import=no

# Which modules can redefine builtins?
redefining-builtins-modules=six.moves,past.builtins,future.builtins


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# Indentation unit, usually "    " (4 spaces) or "\t" (tab).
indent-string='    '

max-line-length=80
max-module-lines=1000

# List of optional constructs for which whitespace checking is disabled.
# `dict-separator` allows tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=

# Allow body on same line of class?
single-line-class-stmt=no

# Allow body on same line of if-statement if there's no else?
single-line-if-stmt=no


[SIMILARITIES]

ignore-comments=yes
ignore-docstrings=yes
ignore-imports=no
min-similarity-lines=4


[TYPECHECK]

# Fully qualified name of decorators that produce context managers.
contextmanager-decorators=contextlib.contextmanager

# Regex of generated members (avoids no-member errors)
generated-members=

# Allow ".*Mixin" classes to access non-existent members.
ignore-mixin-members=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# Qualified name of classes where members should not be checked.
ignored-classes=optparse.Values, thread._local, _thread._local

# Qualified names of modules (allows globs) where members should not be checked
ignored-modules=

# Show possible members, based on edit distance.
missing-member-hint=yes
missing-member-hint-distance=1
missing-member-max-choices=1


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__, __new__

# Members which should not be treated as protected.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a (meta-)class method.
valid-classmethod-first-arg=cls
valid-metaclass-classmethod-first-arg=mcs


[DESIGN]

# Maximum number of arguments for function / method
max-args=5

# Maximum number of attributes for a class (see R0902).
max-attributes=7

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of statements in function / method body
max-statements=50

# Minimum number of public methods for a class (see R0903).
min-public-methods=2


[IMPORTS]

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=optparse, tkinter.tix

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Show an internal depency graph in report RP0402.
int-import-graph=

# Import order adaptions.
known-standard-library=
known-third-party=enchant


[EXCEPTIONS]

# Disallow catching of these over-broad exceptions classes.
overgeneral-exceptions=Exception
